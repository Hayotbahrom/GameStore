// <auto-generated />
using System;
using GameStore.Infrastructure.DbContexts;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace GameStore.Infrastructure.Migrations
{
    [DbContext(typeof(GameStoreDbContext))]
    [Migration("20250629054002_SeedDataInit")]
    partial class SeedDataInit
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.6")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("GameStore.Domain.Entities.Game", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Key")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("Key")
                        .IsUnique();

                    b.ToTable("Games");

                    b.HasData(
                        new
                        {
                            Id = new Guid("99999999-9999-9999-9999-999999999999"),
                            Description = "A deep and challenging strategy game.",
                            Key = "super-strategy",
                            Name = "Super Strategy Game"
                        },
                        new
                        {
                            Id = new Guid("88888888-8888-8888-8888-888888888888"),
                            Description = "Fast-paced arcade FPS experience.",
                            Key = "arcade-shooter",
                            Name = "Arcade Shooter"
                        });
                });

            modelBuilder.Entity("GameStore.Domain.Entities.GameGenre", b =>
                {
                    b.Property<Guid>("GameId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("GenreId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("GameId", "GenreId");

                    b.HasIndex("GenreId");

                    b.ToTable("GameGenres");

                    b.HasData(
                        new
                        {
                            GameId = new Guid("99999999-9999-9999-9999-999999999999"),
                            GenreId = new Guid("aaa11111-aaaa-aaaa-aaaa-aaaaaaaaaaaa")
                        },
                        new
                        {
                            GameId = new Guid("88888888-8888-8888-8888-888888888888"),
                            GenreId = new Guid("ccc22222-cccc-cccc-cccc-cccccccccccc")
                        });
                });

            modelBuilder.Entity("GameStore.Domain.Entities.GamePlatform", b =>
                {
                    b.Property<Guid>("GameId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("PlatformId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("GameId", "PlatformId");

                    b.HasIndex("PlatformId");

                    b.ToTable("GamePlatforms");

                    b.HasData(
                        new
                        {
                            GameId = new Guid("99999999-9999-9999-9999-999999999999"),
                            PlatformId = new Guid("33333333-3333-3333-3333-333333333333")
                        },
                        new
                        {
                            GameId = new Guid("88888888-8888-8888-8888-888888888888"),
                            PlatformId = new Guid("44444444-4444-4444-4444-444444444444")
                        });
                });

            modelBuilder.Entity("GameStore.Domain.Entities.Genre", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("ParentGenreId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("ParentGenreId");

                    b.ToTable("Genres");

                    b.HasData(
                        new
                        {
                            Id = new Guid("aaa11111-aaaa-aaaa-aaaa-aaaaaaaaaaaa"),
                            Name = "Strategy"
                        },
                        new
                        {
                            Id = new Guid("aaa22222-aaaa-aaaa-aaaa-aaaaaaaaaaaa"),
                            Name = "RTS",
                            ParentGenreId = new Guid("aaa11111-aaaa-aaaa-aaaa-aaaaaaaaaaaa")
                        },
                        new
                        {
                            Id = new Guid("aaa33333-aaaa-aaaa-aaaa-aaaaaaaaaaaa"),
                            Name = "TBS",
                            ParentGenreId = new Guid("aaa11111-aaaa-aaaa-aaaa-aaaaaaaaaaaa")
                        },
                        new
                        {
                            Id = new Guid("bbb11111-bbbb-bbbb-bbbb-bbbbbbbbbbbb"),
                            Name = "RPG"
                        },
                        new
                        {
                            Id = new Guid("ccc11111-cccc-cccc-cccc-cccccccccccc"),
                            Name = "Action"
                        },
                        new
                        {
                            Id = new Guid("ccc22222-cccc-cccc-cccc-cccccccccccc"),
                            Name = "FPS",
                            ParentGenreId = new Guid("ccc11111-cccc-cccc-cccc-cccccccccccc")
                        });
                });

            modelBuilder.Entity("GameStore.Domain.Entities.Platform", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Platforms");

                    b.HasData(
                        new
                        {
                            Id = new Guid("11111111-1111-1111-1111-111111111111"),
                            Type = "Mobile"
                        },
                        new
                        {
                            Id = new Guid("22222222-2222-2222-2222-222222222222"),
                            Type = "Browser"
                        },
                        new
                        {
                            Id = new Guid("33333333-3333-3333-3333-333333333333"),
                            Type = "Desktop"
                        },
                        new
                        {
                            Id = new Guid("44444444-4444-4444-4444-444444444444"),
                            Type = "Console"
                        });
                });

            modelBuilder.Entity("GameStore.Domain.Entities.GameGenre", b =>
                {
                    b.HasOne("GameStore.Domain.Entities.Game", "Game")
                        .WithMany("GameGenres")
                        .HasForeignKey("GameId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GameStore.Domain.Entities.Genre", "Genre")
                        .WithMany("GameGenres")
                        .HasForeignKey("GenreId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Game");

                    b.Navigation("Genre");
                });

            modelBuilder.Entity("GameStore.Domain.Entities.GamePlatform", b =>
                {
                    b.HasOne("GameStore.Domain.Entities.Game", "Game")
                        .WithMany("GamePlatforms")
                        .HasForeignKey("GameId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GameStore.Domain.Entities.Platform", "Platform")
                        .WithMany("GamePlatforms")
                        .HasForeignKey("PlatformId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Game");

                    b.Navigation("Platform");
                });

            modelBuilder.Entity("GameStore.Domain.Entities.Genre", b =>
                {
                    b.HasOne("GameStore.Domain.Entities.Genre", "ParentGenre")
                        .WithMany("SubGenres")
                        .HasForeignKey("ParentGenreId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("ParentGenre");
                });

            modelBuilder.Entity("GameStore.Domain.Entities.Game", b =>
                {
                    b.Navigation("GameGenres");

                    b.Navigation("GamePlatforms");
                });

            modelBuilder.Entity("GameStore.Domain.Entities.Genre", b =>
                {
                    b.Navigation("GameGenres");

                    b.Navigation("SubGenres");
                });

            modelBuilder.Entity("GameStore.Domain.Entities.Platform", b =>
                {
                    b.Navigation("GamePlatforms");
                });
#pragma warning restore 612, 618
        }
    }
}
